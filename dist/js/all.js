class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static get database(){if(!navigator.serviceWorker)return Promise.resolve();return(window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB).open("rreviews",1)}static fetchRestaurants(e){fetch(DBHelper.DATABASE_URL).then(e=>e.json()).then(t=>{DBHelper.storeRestaurantDataInIndexedDB(t),e(null,t)}).catch(t=>{DBHelper.getRestaurantDataFromIndexedDB().then(t=>{e(null,t)})})}static storeRestaurantDataInIndexedDB(e){const t=DBHelper.database;DBHelper.upgadeIndexedDB(t),t&&(t.onsuccess=function(n){const r=t.result.transaction("rreviews","readwrite").objectStore("rreviews");e.forEach(e=>{r.put(e)})})}static getRestaurantDataFromIndexedDB(){return new Promise((e,t)=>{const n=DBHelper.database;DBHelper.upgadeIndexedDB(n),n&&(n.onsuccess=function(t){const r=[];n.result.transaction("rreviews","readonly").objectStore("rreviews").openCursor().onsuccess=function(t){const n=t.target.result;n?(r.push(n.value),n.continue()):e(r)}})})}static upgadeIndexedDB(e){e.onupgradeneeded=function(){e.result.createObjectStore("rreviews",{keyPath:"id"}).createIndex("name","name")}}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((r,a)=>{if(r)n(r,null);else{let r=a;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph?e.photograph:e.id}`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}let map;document.addEventListener("DOMContentLoaded",e=>{fetchNeighborhoods(),fetchCuisines()});const observer=new IntersectionObserver(onIntersection,{rootMargin:"0px",threshold:.1});function onIntersection(e){e.forEach(e=>{e.intersectionRatio>0&&(observer.unobserve(e.target),loadImage(e.target))})}function loadImage(e){const t=e.dataset.src;fetchImage(t).then(()=>{e.src=t})}function fetchImage(e){return new Promise((t,n)=>{const r=new Image;r.src=e,r.onload=t,r.onerror=n})}function fetchNeighborhoods(){DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(this.neighborhoods=t,fillNeighborhoodsHTML())})}function fillNeighborhoodsHTML(e=this.neighborhoods){const t=document.getElementById("neighborhoods-select");t&&e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.appendChild(n)})}function fetchCuisines(){DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(this.cuisines=t,fillCuisinesHTML())})}function fillCuisinesHTML(e=this.cuisines){const t=document.getElementById("cuisines-select");t&&e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.appendChild(n)})}function updateRestaurants(){const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,r=t.selectedIndex,a=e[n].value,s=t[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(a,s,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}function resetRestaurants(e){this.restaurants=[],document.getElementById("restaurants-list").innerHTML="",this.markers&&this.markers.forEach(e=>e.setMap(null)),this.markers=[],this.restaurants=e}function startObserver(){document.querySelectorAll(".restaurant-img").forEach(e=>{observer.observe(e)})}function fillRestaurantsHTML(e=this.restaurants){const t=document.getElementById("restaurants-list");e.forEach(e=>{t.appendChild(createRestaurantHTML(e))}),startObserver(),addMarkersToMap()}function createRestaurantHTML(e){const t=document.createElement("li");t.className="restaurant-card";const n=document.createElement("picture");n.className="restaurant-picture";const r=document.createElement("source");r.className="source-small";let a=DBHelper.imageUrlForRestaurant(e).concat("-small.jpg"),s=a.replace("small","medium");r.srcset=a+" 1x, "+s+" 2x",r.media="(min-width: 500px)",n.appendChild(r);const o=document.createElement("source");o.className="source-large";let i=a.replace("small","large");o.srcset=s+" 1x, "+i+" 2x",o.media="(min-width: 750px)",n.appendChild(o);const l=document.createElement("img");l.className="restaurant-img",l.alt='Image of "'+e.name+'" restaurant.',l.setAttribute("data-src",a),n.appendChild(l);const c=document.createElement("div");c.className="restaurant-info-container",c.appendChild(n);const d=document.createElement("h2");d.innerHTML=e.name,c.appendChild(d);const u=document.createElement("div");u.className="address-container";const m=document.createElement("p");m.setAttribute("aria-describedby","restaurant-neighborhood-label"),m.innerHTML=e.neighborhood,u.appendChild(m);const p=document.createElement("p");p.innerHTML=e.address,p.setAttribute("aria-describedby","restaurant-address-label"),u.appendChild(p),c.appendChild(u),t.appendChild(c);const h=document.createElement("a");return h.innerHTML="View Details",h.className="tap-target restaurant-card-details",h.setAttribute("aria-label","Restaurant: "+e.name+": view details."),h.setAttribute("role","button"),h.href=DBHelper.urlForRestaurant(e),t.appendChild(h),t}function addMarkersToMap(e=this.restaurants){e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,this.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),this.markers.push(t)})}let restaurant;function fetchRestaurantFromURL(e){if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}):e("No restaurant id in URL",null)}function fillRestaurantHTML(e=self.restaurant){document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;const t=document.getElementById("restaurant-img");t.className="restaurant-img";let n=DBHelper.imageUrlForRestaurant(e).concat("-small.jpg");t.setAttribute("data-src",n),t.alt='Image of "'+e.name+'" restaurant.';const r=document.getElementById("source-small");let a=n.replace("small","medium");r.srcset=n+" 1x, "+a+" 2x";const s=document.getElementById("source-large");let o=n.replace("small","large");s.srcset=a+" 1x, "+o+" 2x",document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()}function fillRestaurantHoursHTML(e=self.restaurant.operating_hours){const t=document.getElementById("restaurant-hours");for(let n in e){const r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=n,a.className="table-day",r.appendChild(a);const s=document.createElement("td");s.innerHTML=e[n],s.className="table-time",r.appendChild(s),t.appendChild(r)}}function fillReviewsHTML(e=self.restaurant.reviews){const t=document.getElementById("reviews-container"),n=document.createElement("h3");if(n.innerHTML="Reviews",t.appendChild(n),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const r=document.getElementById("reviews-list");e.forEach(e=>{r.appendChild(createReviewHTML(e))}),t.appendChild(r)}function createReviewHTML(e){const t=document.createElement("li"),n=document.createElement("p");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("p");r.innerHTML=e.date,t.appendChild(r);const a=document.createElement("p");a.innerHTML=`Rating: ${e.rating}`,t.appendChild(a);const s=document.createElement("p");return s.className="review-comments",s.innerHTML=e.comments,t.appendChild(s),t}function fillBreadcrumb(e=self.restaurant){const t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)}function getParameterByName(e,t){t||(t=window.location.href),e=e.replace(/[[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}window.initMap=(()=>{this.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),window.initMapDetails=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})}),"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("sw.js").then(()=>{console.log("Service Worker Registerd")}).catch(e=>{console.error(e)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
