class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/"}static get RESTAURANT_URL(){return`${this.DATABASE_URL}restaurants/`}static get REVIEW_URL(){return`${this.DATABASE_URL}reviews/`}static get database(){if(!navigator.serviceWorker)return Promise.resolve();return(window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB).open("rreviews",1)}static fetchRestaurants(e){DBHelper.getRestaurantDataFromIndexedDB().then(t=>{e(null,t)}),fetch(DBHelper.RESTAURANT_URL).then(e=>e.json()).then(t=>{DBHelper.storeRestaurantDataInIndexedDB(t),e(null,t)}).catch(t=>{e(t,null)})}static fetchRestaurantById(e,t){const n=`${this.REVIEW_URL}?restaurant_id=${e}`,r=DBHelper.database;DBHelper.upgadeIndexedDB(r),r&&(r.onsuccess=(a=>{const s=r.result;s.transaction(["rreviews"],"readwrite").objectStore("rreviews").index("id").openCursor().onsuccess=(r=>{const a=r.target.result;if(a)if(a.value.id==e){const e=a.value;fetch(n).then(e=>e.json()).then(n=>{e.reviews=n,s.transaction(["rreviews"],"readwrite").objectStore("rreviews").put(e),t(null,e)}).catch(n=>{t(null,e)})}else a.continue()})}))}static storeRestaurantDataInIndexedDB(e){const t=DBHelper.database;DBHelper.upgadeIndexedDB(t),t&&(t.onsuccess=(n=>{const r=t.result.transaction("rreviews","readwrite").objectStore("rreviews");e.forEach(e=>{r.put(e)})}))}static setRestaurantFavorite(e,t){const n=DBHelper.database;DBHelper.upgadeIndexedDB(n),n&&(n.onsuccess=(r=>{const a=n.result.transaction(["rreviews"],"readwrite").objectStore("rreviews").index("id"),s=`${this.RESTAURANT_URL}${e}/?is_favorite=${t}`;a.openCursor().onsuccess=(n=>{const r=n.target.result;if(r)if(r.value.id==e){r.value.is_favorite=t,r.update(r.value);const e=new Request(s,{method:"PUT"});fetch(e).catch(e=>{navigator.onLine||this.addRequestToQueue({url:s,options:{method:"PUT"}})})}else r.continue()})}))}static addRestaurantReview(e){const t=new Request(this.REVIEW_URL,{body:JSON.stringify(e),method:"POST"});fetch(t).then(e=>e.json()).then(t=>{this.fetchRestaurantById(e.restaurant_id,{})}).catch(t=>{navigator.onLine||this.addRequestToQueue({url:this.REVIEW_URL,options:{body:JSON.stringify(e),method:"POST"}}),this.fetchRestaurantById(e.restaurant_id,(t,n)=>{n.reviews.push(e);const r=DBHelper.database;DBHelper.upgadeIndexedDB(r),r&&(r.onsuccess=(e=>{r.result.transaction(["rreviews"],"readwrite").objectStore("rreviews").put(n)}))})})}static getRestaurantDataFromIndexedDB(){return new Promise((e,t)=>{const n=DBHelper.database;DBHelper.upgadeIndexedDB(n),n&&(n.onsuccess=(t=>{const r=[];n.result.transaction("rreviews","readonly").objectStore("rreviews").openCursor().onsuccess=(t=>{const n=t.target.result;n?(r.push(n.value),n.continue()):e(r)})}))})}static upgadeIndexedDB(e){e.onupgradeneeded=function(){const t=e.result,n=t.createObjectStore("rreviews",{keyPath:"id"});n.createIndex("name","name"),n.createIndex("id","id",{unique:!0}),t.createObjectStore("requestqueue",{autoIncrement:!0})}}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((r,a)=>{if(r)n(r,null);else{let r=a;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph?e.photograph:e.id}`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static addRequestToQueue(e){const t=DBHelper.database;DBHelper.upgadeIndexedDB(t),t&&(t.onsuccess=(n=>{t.result.transaction("requestqueue","readwrite").objectStore("requestqueue").put(e)}))}static sendQueuedRequests(){const e=DBHelper.database;DBHelper.upgadeIndexedDB(e),e&&(e.onsuccess=(t=>{e.result.transaction("requestqueue","readwrite").objectStore("requestqueue").openCursor().onsuccess=(e=>{const t=e.target.result;if(t){const e=new Request(t.value.url,t.value.options);fetch(e),t.delete(),t.continue()}})}))}}let map;document.addEventListener("DOMContentLoaded",e=>{fetchNeighborhoods(),fetchCuisines()});const observer=new IntersectionObserver(onIntersection,{rootMargin:"0px",threshold:.1});function onIntersection(e){e.forEach(e=>{e.intersectionRatio>0&&(observer.unobserve(e.target),loadImage(e.target))})}function loadImage(e){const t=e.dataset.src;fetchImage(t).then(()=>{e.src=t})}function fetchImage(e){return new Promise((t,n)=>{const r=new Image;r.src=e,r.onload=t,r.onerror=n})}function fetchNeighborhoods(){DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(this.neighborhoods=t,fillNeighborhoodsHTML())})}function fillNeighborhoodsHTML(e=this.neighborhoods){const t=document.getElementById("neighborhoods-select");t&&e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.appendChild(n)})}function fetchCuisines(){DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(this.cuisines=t,fillCuisinesHTML())})}function fillCuisinesHTML(e=this.cuisines){const t=document.getElementById("cuisines-select");t&&e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.appendChild(n)})}function updateRestaurants(){const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,r=t.selectedIndex,a=e[n].value,s=t[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(a,s,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}function resetRestaurants(e){this.restaurants=[],document.getElementById("restaurants-list").innerHTML="",this.markers&&this.markers.forEach(e=>e.setMap(null)),this.markers=[],this.restaurants=e}function startObserver(){document.querySelectorAll(".restaurant-img").forEach(e=>{observer.observe(e)})}function fillRestaurantsHTML(e=this.restaurants){const t=document.getElementById("restaurants-list");e.forEach(e=>{t.appendChild(createRestaurantHTML(e))}),startObserver(),addMarkersToMap()}function createRestaurantHTML(e){void 0===e.is_favorite&&(e.is_favorite=!1);const t=document.createElement("li");t.className="restaurant-card";const n=document.createElement("picture");n.className="restaurant-picture";const r=document.createElement("source");r.className="source-small";let a=DBHelper.imageUrlForRestaurant(e).concat("-small.jpg"),s=a.replace("small","medium");r.srcset=a+" 1x, "+s+" 2x",n.appendChild(r);const o=document.createElement("source");o.className="source-large";let i=a.replace("small","large");o.srcset=s+" 1x, "+i+" 2x",o.media="(min-width: 750px)",n.appendChild(o);const c=document.createElement("img");c.className="restaurant-img",c.alt='Image of "'+e.name+'" restaurant.',c.setAttribute("data-src",a),n.appendChild(c);const l=document.createElement("div");l.className="restaurant-info-container",l.appendChild(n);const u=document.createElement("h2");u.innerHTML=e.name,l.appendChild(u);const d=document.createElement("a"),m=JSON.parse(e.is_favorite)?"Remove restaurant "+e.name+"from favorites.":"Add restaurant "+e.name+"to favorites.";d.className="tap-target top-right",d.setAttribute("aria-label",m),d.setAttribute("role","button"),d.setAttribute("tabindex","0"),d.setAttribute("data-restid",e.id),d.setAttribute("is-favorite",e.is_favorite),d.addEventListener("click",toggleFavorite,!1),l.appendChild(d);const p=document.createElement("i");p.className="material-icons favorite-icon",p.innerHTML=JSON.parse(e.is_favorite)?"favorite":"favorite_border",d.appendChild(p);const h=document.createElement("div");h.className="address-container";const f=document.createElement("p");f.setAttribute("aria-describedby","restaurant-neighborhood-label"),f.innerHTML=e.neighborhood,h.appendChild(f);const g=document.createElement("p");g.innerHTML=e.address,g.setAttribute("aria-describedby","restaurant-address-label"),h.appendChild(g),l.appendChild(h),t.appendChild(l);const v=document.createElement("a");return v.innerHTML="View Details",v.className="tap-target restaurant-card-details",v.setAttribute("aria-label","Restaurant: "+e.name+": view details."),v.setAttribute("role","button"),v.href=DBHelper.urlForRestaurant(e),t.appendChild(v),t}function addMarkersToMap(e=this.restaurants){e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,this.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),this.markers.push(t)})}function toggleFavorite(e){e||(e=window.event);const t=e.srcElement||e.target,n=this.dataset.restid;let r=!JSON.parse(this.getAttribute("is-favorite"));n&&(this.setAttribute("is-favorite",r),DBHelper.setRestaurantFavorite(n,r),t==this?this.childNodes.length>0&&(this.childNodes[0].innerHTML=r?"favorite":"favorite_border"):t.innerHTML=r?"favorite":"favorite_border")}let restaurant;function fetchRestaurantFromURL(e){if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}):e("No restaurant id in URL",null)}function fillRestaurantHTML(e=self.restaurant){document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;const t=document.getElementById("restaurant-img");t.className="restaurant-img";let n=DBHelper.imageUrlForRestaurant(e).concat("-small.jpg");t.setAttribute("data-src",n),t.alt='Image of "'+e.name+'" restaurant.';const r=document.getElementById("source-small");let a=n.replace("small","medium");r.srcset=n+" 1x, "+a+" 2x";const s=document.getElementById("source-large");let o=n.replace("small","large");s.srcset=a+" 1x, "+o+" 2x",document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()}function fillRestaurantHoursHTML(e=self.restaurant.operating_hours){const t=document.getElementById("restaurant-hours");for(let n in e){const r=document.createElement("tr"),a=document.createElement("td");a.innerHTML=n,a.className="table-day",r.appendChild(a);const s=document.createElement("td");s.innerHTML=e[n],s.className="table-time",r.appendChild(s),t.appendChild(r)}}function submitReview(e){e||(e=window.event);const t=(e.srcElement||e.target).getAttribute("restaurant-id"),n=document.getElementById("review-name").value,r=document.getElementById("review-text").value,a=document.getElementById("review-rating").value;if(n&&r){const e={restaurant_id:t,name:n,rating:a,comments:r,createdAt:(new Date).getTime()};document.getElementById("reviews-list").appendChild(createReviewHTML(e));DBHelper.addRestaurantReview(e)}}function fillReviewsHTML(e=self.restaurant.reviews,t=self.restaurant.id){const n=document.getElementById("reviews-container");if(!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void n.appendChild(e)}const r=document.getElementById("add-comment");r.setAttribute("restaurant-id",t),r.addEventListener("click",submitReview,!1);const a=document.getElementById("reviews-list");e.forEach(e=>{a.appendChild(createReviewHTML(e))}),n.appendChild(a)}function createReviewHTML(e){const t=document.createElement("li"),n=document.createElement("p");n.innerHTML=e.name,t.appendChild(n);const r=document.createElement("p");r.innerHTML=new Date(e.createdAt).toLocaleDateString(),t.appendChild(r);const a=document.createElement("p");a.innerHTML=`Rating: ${e.rating}`,t.appendChild(a);const s=document.createElement("p");return s.className="review-comments",s.innerHTML=e.comments,t.appendChild(s),t}function fillBreadcrumb(e=self.restaurant){const t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)}function getParameterByName(e,t){t||(t=window.location.href),e=e.replace(/[[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}window.initMap=(()=>{this.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),window.initMapDetails=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})}),"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("sw.js").then(()=>{console.log("Service Worker Registerd")}).catch(e=>{console.error(e)})}),window.addEventListener("online",DBHelper.sendQueuedRequests,!1);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
